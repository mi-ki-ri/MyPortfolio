<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Products on HOTTA Tatsuyas Portfolio</title>
    <link>https://mi-ki-ri.github.io/MyPortfolio/product/</link>
    <description>Recent content in Products on HOTTA Tatsuyas Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://mi-ki-ri.github.io/MyPortfolio/product/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LuckyTarot</title>
      <link>https://mi-ki-ri.github.io/MyPortfolio/product/luckey-tarot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mi-ki-ri.github.io/MyPortfolio/product/luckey-tarot/</guid>
      <description>これって何？ スマートスピーカーのEchoなどに搭載された人工知能アシスタントであるAlexa、
そのAlexaのスキルの一つを作成したものです。
Alexaの公式アプリで「ラッキータロット」と検索すれば出てくると思います。
何ができるの？ 「Alexa, ラッキータロットを開いて」と呼びかけることで起動し、
ランダムにタロットカードを一つ選び、情報を読み上げます。
「起動」しかコマンドがなく、ランダムに文字列を与えるだけだったので入門としてはよかったかなと思います。
使用した技術は？ 基本的にAWSの公式に則って進めました。
node.jsをAWS Lambda上で動かして作っています。</description>
    </item>
    
    <item>
      <title>MyPortfolio</title>
      <link>https://mi-ki-ri.github.io/MyPortfolio/product/myportfolio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mi-ki-ri.github.io/MyPortfolio/product/myportfolio/</guid>
      <description>このページとこのページを動かしている仕組み全体のこと。
このページはGithub Pagesにてデプロイされています。
Github Pages へのデプロイはCircleCIを経由しています。
CircleCIが動くのは別リポジトリ( MyPortFolioSource )にプッシュがあったときです。
つまり、
 MyPortFolioSourceへのプッシュ CircleCIが発動、  MyPortFolioSourceの中身を取ってきてhugo MyPortFolio(このページのリポジトリ)にプッシュ (実はテーマのリポジトリもあったり…)  Github Pagesが動いてデプロイしてくれる  という多層構造になっています。
なぜこうしたのかというと、Github上でファイルを作るだけで更新される仕組みにしたかったからです。</description>
    </item>
    
    <item>
      <title>MyTab.js</title>
      <link>https://mi-ki-ri.github.io/MyPortfolio/product/mytabjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mi-ki-ri.github.io/MyPortfolio/product/mytabjs/</guid>
      <description>これって何？ Web上でタブ譜を編集・演奏するという実験的なサイトです。
http://mytab.mikiri.net/
たてよこWebアワードに参加するために作りました。
使用した技術は？ 基本的にJavaScriptで、
Web Audio APIの操作にtone.js、
DOM操作にjQueryを使用しています。</description>
    </item>
    
    <item>
      <title>NadeNadeSynth</title>
      <link>https://mi-ki-ri.github.io/MyPortfolio/product/nadenadesynth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mi-ki-ri.github.io/MyPortfolio/product/nadenadesynth/</guid>
      <description>URL: https://nadenadesynth.herokuapp.com/
NadeNadeSynth(ナデナデシンセ)とは、画面を撫でることで座標に応じた音が出るWebアプリです。
技術的には、Tone.jsを使っています。
フレームワークはNuxt.jsでデプロイ先はherokuです。
難しかった点として、Nuxtの強みであるはずのSSRがaudiocontextを複雑にしてしまったことがあります。
no-ssrタグを利用して解決したはずです。</description>
    </item>
    
    <item>
      <title>TobanToban</title>
      <link>https://mi-ki-ri.github.io/MyPortfolio/product/tobantoban/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mi-ki-ri.github.io/MyPortfolio/product/tobantoban/</guid>
      <description>URL :https://play.google.com/store/apps/details?id=net.mikiri.tobantoban
これって何？ 掃除当番などを決めるのに使える、シンプルなランダムマッチングアプリです。
「メンバー」「ジョブ」を登録してシャッフルボタンを押すとシャッフルされたメンバーとジョブが出てきます。
どうやって作ったの？ ReactNativeで書かれており、バックエンドはFirebase(特にRealTimeDB)を利用しています。
正直中身はグチャッとしているのでもう一度見直したいです。</description>
    </item>
    
  </channel>
</rss>